openapi: 3.0.3
info:
  description: |
    This services sorts a given image list on a 2D surface using the provided embeddings and returns the xy positions and image IDs for each input image.
  title: Embeddings Grid API service
  version: 1.0.0
servers:
- description: Staging server
  url: https://xcurator-staging.3pc.de
- description: Development server
  url: http://localhost:8080
paths:
  /ping:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
          description: Ping back
      x-accepts: application/json
  /sort:
    post:
      description: |
        <p>Arrange a list of image embeddings onto a 2D grid using FLAS
        algorithm presented in the paper <a href="https://arxiv.org/abs/2205.04255v2">
        Improved Evaluation and Generation of Grid Layouts using Distance
        Preservation Quality and Linear Assignment Sorting</a>. FLAS is an
        sorting algorithm optimized for speed while preserving high quality.<p>

        <p>The service allows to create sorted 2D grid views out of a list of
        images represented by an <code>float[]</code> embedding and an id. The embeddings
        can have any dimension, but it is important that all elements of an
        request have the same length. Utilizing the grid with significantly
        large image embeddings may lead to a perceptible decrease in
        computational speed during the arrangement calculation, as the
        algorithm allocates additional processing resources to accommodate
        the increased complexity of larger embedding data.</p>

        <h2>Features</h2>
        <h4>Seeded Placement of Elements:</h4>
        <p>When arranging a list of image
        embeddings using the FLAS algorithm, you can mark selected images as
        "seeded." These seeded elements will serve as anchor points around
        which the sorting algorithm will optimize the placement of the remaining
        images. The FLAS algorithm will then work to create a balanced and visually
        appealing layout while respecting the fixed positions of the seeded elements</p>

        <h4>Oversized 2x2 Grid Elements:</h4>
        <p>The oversized elements feature allows you to create visually stunning
        grid layouts by designating specific seeded elements to occupy multiple
        slots on the grid, enlarging them to 2x2 size, and intelligently replicating
        the images within the area, unlocking new aesthetic possibilities in
        your image arrangements.</p>

        <h4>Adjustable Size Factor for Adding Free Space:</h4>
        <p>To enhance the aesthetic quality of the grid layout, the service
        offers the ability to adjust a size factor that adds free space between
        elements. This feature allows you to control the spacing between images,
        helping to avoid clutter and create a more visually appealing grid. By
        fine-tuning the size factor, you can strike the right balance between
        compactness and readability in the resulting grid view.</p>

        <h4>Infinit Grid Using Wrapped Mode:</h4>
        <p>The wrapped mode calculation of the grid to produce
        a seamless image grid tile that can be placed next to another without
        any visible borders or disruptions, creating the illusion of a continuous
        and infinite area when these tiles are tiled together.</p>
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SortingRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SortingResponse'
          description: Sorted image grid
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientErrorResponse'
          description: bad request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
          description: unexpected error
      summary: Arrange a list of image embeddings onto a 2D grid
      tags:
      - Image embeddings list
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: Image embeddings list
components:
  schemas:
    PingResponse:
      description: Simple JSON ping response endpoint
      example:
        msg: Ping back
      properties:
        msg:
          example: Ping back
          type: string
      required:
      - msg
      title: PingResponse
      type: object
    SortingRequest:
      description: |
        Request to arrange a given list of images with respect to
        the given grid specification.
      example:
      - uid: af30
        embedding: ZGM2NmFhMDgtZmFmYS00YzZmLWFjNWYtYzRmMmI5N2Q2OTE1Cg==
      properties:
        images:
          items:
            $ref: '#/components/schemas/SortingRequest_images_inner'
          type: array
        grid:
          $ref: '#/components/schemas/SortingRequest_grid'
      required:
      - grid
      - images
      title: SortingRequest
      type: object
    SortingResponse:
      example:
        grid:
          columns: 10
          rows: 3
        sorted_images:
        - size_cols: 2
          column: 10
          id: 408468fd-ce11-46e2-b5c0-936a980a42ef
          row: 6
          size_rows: 2
        - size_cols: 2
          column: 10
          id: 408468fd-ce11-46e2-b5c0-936a980a42ef
          row: 6
          size_rows: 2
      properties:
        sorted_images:
          description: The image uid and its position on the grid
          items:
            $ref: '#/components/schemas/SortingResponse_sorted_images_inner'
          type: array
        grid:
          $ref: '#/components/schemas/SortingResponse_grid'
      required:
      - grid
      - sorted_images
      title: SortingResponse
      type: object
    ClientErrorResponse:
      description: "Client error, mostly syntax or attribute errors that the client\
        \ can solve"
      properties:
        timestamp:
          example: 2023-07-29T19:56:10.347Z
          format: date-time
          type: string
        status:
          example: 400
          format: int32
          type: integer
        error:
          example: "Wrong parameter value X given, expected Y"
          type: string
        path:
          example: /sort
          type: string
      required:
      - error
      - path
      - status
      - timestamp
    ServerErrorResponse:
      description: Some error on server side that cannot be solved by the client
      properties:
        timestamp:
          example: 2023-07-29T19:56:10.347Z
          format: date-time
          type: string
        status:
          example: 500
          format: int32
          type: integer
        error:
          example: Internal server error
          type: string
        path:
          example: /sort
          type: string
      required:
      - error
      - path
      - status
      - timestamp
    SortingRequest_images_inner:
      properties:
        id:
          description: page Id of the flyer page
          example: 408468fd-ce11
          maxLength: 512
          minLength: 1
          type: string
        embedding:
          description: Base64 encoded list of floats
          example: ZGM2NmFhMDgtZmFmYS00YzZmLWFjNWYtYzRmMmI5N2Q2OTE1Cg==
          minLength: 1
          type: string
        seed_column:
          default: -1
          description: The column coordinate this image should be seeded on the grid
          example: 2
          type: integer
        seed_row:
          default: -1
          description: The row coordinate this image should be seeded on grid
          example: 3
          type: integer
        size_cols:
          default: 1
          description: The number of columns the element should span over
          example: 2
          maximum: 2
          minimum: 1
          type: integer
        size_rows:
          default: 1
          description: The number of columns the element should span over
          example: 2
          maximum: 2
          minimum: 1
          type: integer
      required:
      - embedding
      - id
      type: object
    SortingRequest_grid:
      description: The rows and columns of the grid
      example:
        aspect_ratio: 1.0
        size_factor: 17
        wrapped_mode: "true"
      properties:
        wrapped_mode:
          description: Should a endless grid be calculated that wraps on the edges?
          example: true
          type: boolean
        seed:
          description: Random seed to use for reproducible calls
          example: 42
          type: integer
        aspect_ratio:
          description: |
            The ratio between the columns and rows of the grid as float number. Below 1.0 means portrait, 1.0 is squared, above 1.0 means landscape shape.
            Some examples:
              - 1:1 is 1.0
              - 4:3 is 1.33
              - 16:9 is 1.77
          example: 1.33
          exclusiveMinimum: true
          minimum: 0.0
          type: number
        size_factor:
          default: 0
          description: A integer between 1 and 100 that means the percentage of additional
            space the canvas should provide.
          example: 17
          maximum: 1000
          minimum: 0
          type: integer
      required:
      - aspect_ratio
      - wrapped_mode
      type: object
    SortingResponse_sorted_images_inner:
      example:
        size_cols: 2
        column: 10
        id: 408468fd-ce11-46e2-b5c0-936a980a42ef
        row: 6
        size_rows: 2
      properties:
        id:
          description: page Id of the flyer page
          example: 408468fd-ce11-46e2-b5c0-936a980a42ef
          type: string
        row:
          description: The row the image is placed on the grid.
          example: 6
          minimum: 0
          type: integer
        column:
          description: The column the image is placed on the grid.
          example: 10
          minimum: 0
          type: integer
        size_cols:
          default: 1
          description: Number of columns the image span over
          example: 2
          minimum: 1
          type: integer
        size_rows:
          default: 1
          description: Number of rows the image span over
          example: 2
          minimum: 1
          type: integer
      required:
      - column
      - id
      - row
      - size_cols
      - size_rows
      type: object
    SortingResponse_grid:
      description: The rows and columns of the grid
      example:
        columns: 10
        rows: 3
      properties:
        columns:
          description: The number of columns of the grid
          example: 10
          type: integer
        rows:
          description: The number of rows of the grid
          example: 6
          type: integer
      required:
      - columns
      - rows
      type: object
